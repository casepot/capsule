name: PR Multi-Model Review (HITL, self-hosted)

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
  workflow_dispatch:  # Allow manual trigger for testing

permissions:
  contents: read
  pull-requests: write

jobs:
  review:
    runs-on: self-hosted
    if: github.event.pull_request.draft == false  # Skip draft PRs
    env:
      TEST_CMD: ${{ vars.TEST_CMD || 'pytest tests/' }}
      REVIEW_TIMEOUT: ${{ vars.REVIEW_TIMEOUT || '120' }}  # Seconds per provider
      GH_TOKEN: ${{ github.token }} # for gh CLI comments
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Claude Authentication (OAuth only)
        env:
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          set -euo pipefail
          # Never use API keys for Claude in this pipeline
          unset ANTHROPIC_API_KEY
          # Optional: unlock the login keychain if password provided (service runners only)
          if [ -n "${KEYCHAIN_PASSWORD:-}" ]; then
            security unlock-keychain -p "$KEYCHAIN_PASSWORD" ~/Library/Keychains/login.keychain-db || true
            security set-keychain-settings -lut 3600 ~/Library/Keychains/login.keychain-db || true
          fi
          # Ensure Claude in PATH for non-standard install
          if [ -x "$HOME/.claude/local/claude" ]; then
            export PATH="$HOME/.claude/local:$PATH"
          fi
          # Quick auth probe (uses OAuth from Keychain)
          if claude -p "echo test" --output-format text >/dev/null 2>&1; then
            echo "âœ“ Claude OAuth ready via Keychain"
          else
            echo "::warning::Claude not authenticated. Ensure you are logged in locally with 'claude' (/login), and runner has access to your login keychain."
          fi

      - name: Ensure Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: '.review-pipeline/package-lock.json'

      - name: Guardrails (auth + no API keys + CLIs present)
        run: |
          # Ensure Claude Code is in PATH if installed in non-standard location
          if [ -x "$HOME/.claude/local/claude" ]; then
            export PATH="$HOME/.claude/local:$PATH"
          fi
          bash .review-pipeline/scripts/auth-check.sh

      - name: Build review context
        shell: bash
        id: context
        run: |
          set -euo pipefail
          mkdir -p .review-pipeline/workspace/context .review-pipeline/workspace/reports
          # PR metadata
          if [ -n "${{ github.event.pull_request.number }}" ]; then
            gh pr view ${{ github.event.pull_request.number }} --json number,state,headRefName,baseRefName,headRefOid,permalink,author --repo "${{ github.repository }}" > .review-pipeline/workspace/context/pr.json
          else
            # Manual workflow_dispatch fallback
            echo '{"repo":"'${{ github.event.repository.name }}'","number":0,"head_sha":"'${{ github.sha }}'","branch":"'${{ github.ref_name }}'","link":"manual"}' > .review-pipeline/workspace/context/pr.json
          fi
          # Diff & files
          if [ -n "${{ github.event.pull_request.number }}" ]; then
            gh pr diff ${{ github.event.pull_request.number }} --patch --repo "${{ github.repository }}" > .review-pipeline/workspace/context/diff.patch
            gh pr view ${{ github.event.pull_request.number }} --json files --repo "${{ github.repository }}" | jq -r '.files[].path' > .review-pipeline/workspace/context/files.txt
          else
            # Manual trigger - use git diff
            git diff HEAD~1 > .review-pipeline/workspace/context/diff.patch || git diff --cached > .review-pipeline/workspace/context/diff.patch || echo "No diff available" > .review-pipeline/workspace/context/diff.patch
            git diff --name-only HEAD~1 > .review-pipeline/workspace/context/files.txt || git diff --name-only --cached > .review-pipeline/workspace/context/files.txt || echo "No files changed" > .review-pipeline/workspace/context/files.txt
          fi
          # Optional tests
          if [ -n "${TEST_CMD}" ]; then
            set +e
            echo "\$ ${TEST_CMD}" > .review-pipeline/workspace/context/tests.txt
            ${TEST_CMD} >> .review-pipeline/workspace/context/tests.txt 2>&1
            echo "== exit:$? ==" >> .review-pipeline/workspace/context/tests.txt
            set -e
          fi

      - name: Provider reviews (run in parallel)
        shell: bash
        timeout-minutes: 5  # Prevent hanging reviews
        run: |
          set -euo pipefail
          # Ensure Claude Code is in PATH if installed in non-standard location
          if [ -x "$HOME/.claude/local/claude" ]; then
            export PATH="$HOME/.claude/local:$PATH"
          fi
          # Forbid API keys in this pipeline
          unset ANTHROPIC_API_KEY OPENAI_API_KEY GEMINI_API_KEY
          
          # Claude Code - use Sonnet 4 for speed
          ( (timeout ${REVIEW_TIMEOUT:-120} claude -p "$(cat .review-pipeline/prompts/review.claude.md; echo; cat .review-pipeline/prompts/review.core.md)" \
              --model sonnet \
              --permission-mode plan \
              --output-format json \
              2>/dev/null \
              | node .review-pipeline/scripts/normalize-json.js \
              > .review-pipeline/workspace/reports/claude-code.json) || \
            echo '{"tool":"claude-code","model":"claude-sonnet-4-20250514","timestamp":"'$(date -u +%Y-%m-%dT%H:%M:%SZ)'","pr":{"repo":"'${{ github.event.repository.name }}'","number":'${{ github.event.pull_request.number }}',"head_sha":"'${{ github.event.pull_request.head.sha }}'","branch":"'${{ github.event.pull_request.head.ref }}'","link":"'${{ github.event.pull_request.html_url }}'"},"summary":"Provider failed to respond","assumptions":[],"findings":[],"tests":{"executed":false,"command":"","exit_code":null,"summary":"Not executed","coverage":null},"metrics":{},"evidence":[],"exit_criteria":{"ready_for_pr":false,"reasons":["Provider error occurred"]}}' > .review-pipeline/workspace/reports/claude-code.json ) &
          
          # Codex CLI 0.25.0 - use fast reasoning effort
          ( (timeout ${REVIEW_TIMEOUT:-120} codex exec --output-last-message .review-pipeline/workspace/reports/codex-cli.raw.txt \
              -s read-only \
              -C . \
              -c model_reasoning_effort="low" \
              "$(cat .review-pipeline/prompts/review.codex.md; echo; cat .review-pipeline/prompts/review.core.md)" \
              >/dev/null 2>&1 && \
              cat .review-pipeline/workspace/reports/codex-cli.raw.txt | node .review-pipeline/scripts/normalize-json.js > .review-pipeline/workspace/reports/codex-cli.json && \
              rm -f .review-pipeline/workspace/reports/codex-cli.raw.txt) || \
            echo '{"tool":"codex-cli","model":"gpt-5","timestamp":"'$(date -u +%Y-%m-%dT%H:%M:%SZ)'","pr":{"repo":"'${{ github.event.repository.name }}'","number":'${{ github.event.pull_request.number }}',"head_sha":"'${{ github.event.pull_request.head.sha }}'","branch":"'${{ github.event.pull_request.head.ref }}'","link":"'${{ github.event.pull_request.html_url }}'"},"summary":"Provider failed to respond","assumptions":[],"findings":[],"tests":{"executed":false,"command":"","exit_code":null,"summary":"Not executed","coverage":null},"metrics":{},"evidence":[],"exit_criteria":{"ready_for_pr":false,"reasons":["Provider error occurred"]}}' > .review-pipeline/workspace/reports/codex-cli.json ) &
          
          # Gemini CLI - use 2.5 Pro for production quality
          ( (echo "$(cat .review-pipeline/prompts/review.gemini.md; echo; \
              echo 'CRITICAL: Output ONLY the JSON object, no markdown code fences or other text.'; \
              cat .review-pipeline/prompts/review.core.md)" | \
              timeout ${REVIEW_TIMEOUT:-120} sh -c 'GEMINI_API_KEY="" gemini -m gemini-2.5-pro -p') \
              2>/dev/null \
              | node .review-pipeline/scripts/normalize-json.js \
              > .review-pipeline/workspace/reports/gemini-cli.json) || \
            echo '{"tool":"gemini-cli","model":"gemini-2.5-pro","timestamp":"'$(date -u +%Y-%m-%dT%H:%M:%SZ)'","pr":{"repo":"'${{ github.event.repository.name }}'","number":'${{ github.event.pull_request.number }}',"head_sha":"'${{ github.event.pull_request.head.sha }}'","branch":"'${{ github.event.pull_request.head.ref }}'","link":"'${{ github.event.pull_request.html_url }}'"},"summary":"Provider failed to respond","assumptions":[],"findings":[],"tests":{"executed":false,"command":"","exit_code":null,"summary":"Not executed","coverage":null},"metrics":{},"evidence":[],"exit_criteria":{"ready_for_pr":false,"reasons":["Provider error occurred"]}}' > .review-pipeline/workspace/reports/gemini-cli.json ) &
          
          # Wait for all background jobs
          wait
          
          # Verify reports were created
          for report in claude-code codex-cli gemini-cli; do
            if [ ! -f ".review-pipeline/workspace/reports/${report}.json" ]; then
              echo "::warning::Missing report: ${report}.json"
            fi
          done

      - name: Aggregate & gate
        shell: bash
        run: |
          cd .review-pipeline && npm install --no-audit --no-fund
          node scripts/aggregate-reviews.mjs || echo "Warning: Aggregation had issues, check reports"

      - name: Attach summary as PR comment
        if: always() && github.event.pull_request.number != ''
        shell: bash
        run: |
          if [ -f .review-pipeline/workspace/summary.md ]; then
            # Check if we already commented on this SHA
            existing_comments=$(gh pr view ${{ github.event.pull_request.number }} --json comments --repo "${{ github.repository }}" | jq -r '.comments[].body' | grep -c "SHA: ${{ github.event.pull_request.head.sha }}" || true)
            if [ "$existing_comments" -eq 0 ]; then
              echo "<!-- Multi-Model Review SHA: ${{ github.event.pull_request.head.sha }} -->" >> .review-pipeline/workspace/summary.md
              gh pr comment ${{ github.event.pull_request.number }} --body-file .review-pipeline/workspace/summary.md --repo "${{ github.repository }}"
            else
              echo "Already commented on this SHA, skipping duplicate."
            fi
          else
            echo "::warning::No summary generated"
          fi

      - name: Fail if gate failed
        shell: bash
        run: |
          if [ -f .review-pipeline/workspace/gate.txt ]; then
            gate_status="$(cat .review-pipeline/workspace/gate.txt)"
            echo "Gate status: $gate_status"
            if [ "$gate_status" = "fail" ]; then
              echo "::error::Review gate failed - must-fix issues found"
              exit 1
            fi
          else
            echo "::warning::No gate status file found"
          fi
