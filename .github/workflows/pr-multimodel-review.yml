name: PR Multi-Model Review (HITL, self-hosted)

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write

jobs:
  review:
    runs-on: self-hosted
    timeout-minutes: 45
    if: github.event_name == 'workflow_dispatch' || github.event.pull_request.draft == false
    env:
      # Environment variable overrides (mapped via env.mapping.json)
      TEST_CMD: ${{ vars.TEST_CMD }}                      # Testing command
      REVIEW_TIMEOUT: ${{ vars.REVIEW_TIMEOUT }}          # Global timeout
      CLAUDE_MODEL: ${{ vars.CLAUDE_MODEL }}              # Claude model override
      CODEX_REASONING: ${{ vars.CODEX_REASONING }}        # Codex reasoning level
      GEMINI_MODEL: ${{ vars.GEMINI_MODEL }}              # Gemini model override
      REVIEW_PARALLEL: ${{ vars.REVIEW_PARALLEL }}        # Parallel execution
      GH_TOKEN: ${{ github.token }}                       # GitHub CLI token
    steps:
      - name: Clean environment (self-hosted runner persistence)
        run: |
          # Self-hosted runners persist GITHUB_ENV between runs
          # Clear any leftover ANTHROPIC tokens from previous workflow runs
          echo "ANTHROPIC_API_KEY=" >> "$GITHUB_ENV"
          echo "ANTHROPIC_AUTH_TOKEN=" >> "$GITHUB_ENV"
          
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history to enable proper diffs

      - name: Detect PR for manual runs
        if: github.event_name == 'workflow_dispatch'
        run: |
          # For manual workflow runs, detect if current branch has an associated PR
          PR_DATA=$(gh pr list --head "${{ github.ref_name }}" --json number,url,headRefName,baseRefName,headRefOid --jq '.[0]' || echo "")
          if [ -n "$PR_DATA" ] && [ "$PR_DATA" != "null" ]; then
            echo "PR_NUMBER=$(echo "$PR_DATA" | jq -r .number)" >> "$GITHUB_ENV"
            echo "PR_URL=$(echo "$PR_DATA" | jq -r .url)" >> "$GITHUB_ENV"
            echo "PR_HEAD_REF=$(echo "$PR_DATA" | jq -r .headRefName)" >> "$GITHUB_ENV"
            echo "PR_BASE_REF=$(echo "$PR_DATA" | jq -r .baseRefName)" >> "$GITHUB_ENV"
            echo "PR_HEAD_SHA=$(echo "$PR_DATA" | jq -r .headRefOid)" >> "$GITHUB_ENV"
            echo "âœ“ Found PR #$(echo "$PR_DATA" | jq -r .number) for branch ${{ github.ref_name }}"
          else
            echo "No PR found for branch ${{ github.ref_name }}"
          fi

      - name: Setup Node.js with cache
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Install review pipeline
        run: |
          # Install the review pipeline package globally from GitHub
          # First uninstall any existing version to ensure clean install
          npm uninstall -g @multi-model/review-pipeline 2>/dev/null || true
          npm install -g github:casepot/multi-model-review-pipeline

      - name: Setup Claude Authentication (OAuth)
        run: |
          # Never use API keys in this pipeline
          unset ANTHROPIC_API_KEY
          unset ANTHROPIC_AUTH_TOKEN
          # Ensure Claude Code wrapper is in PATH for CI
          if [ -x "$HOME/github-runner-capsule/claude" ]; then
            export PATH="$HOME/github-runner-capsule:$PATH"
          elif [ -x "$HOME/.claude/local/claude" ]; then
            export PATH="$HOME/.claude/local:$PATH"
          fi
          # Quick probe: rely on local OAuth (Keychain)
          if claude -p "echo test" --output-format text >/dev/null 2>&1; then
            echo "âœ“ Claude OAuth available via Keychain"
          else
            echo "::warning::Claude not authenticated. Ensure local '/login' has been completed in the runner user session."
          fi

      - name: Check provider authentication
        run: |
          # Ensure wrapper is in PATH
          export PATH="$HOME/github-runner-capsule:$PATH"
          # Run auth check
          review-pipeline auth-check || echo "::warning::Some providers may not be authenticated"

      - name: Run multi-model review
        id: review
        run: |
          # Ensure wrapper is in PATH
          export PATH="$HOME/github-runner-capsule:$PATH"
          
          # Run the review pipeline
          review-pipeline run \
            --config .reviewrc.json \
            --providers "${{ vars.ENABLED_PROVIDERS || 'claude,codex,gemini' }}" \
            || echo "::warning::Review pipeline encountered issues"

      - name: Attach summary as PR comment
        if: always() && (github.event.pull_request.number != '' || env.PR_NUMBER != '')
        shell: bash
        run: |
          if [ -f .review-pipeline/workspace/summary.md ]; then
            # Check if we already commented on this SHA
            PR_NUM="${{ github.event.pull_request.number }}"; if [ -z "$PR_NUM" ]; then PR_NUM="$PR_NUMBER"; fi
            HEAD_SHA="${{ github.event.pull_request.head.sha }}"; if [ -z "$HEAD_SHA" ]; then HEAD_SHA="${{ github.sha }}"; fi
            existing_comments=$(gh pr view "$PR_NUM" --json comments --repo "${{ github.repository }}" | jq -r '.comments[].body' | grep -c "SHA: $HEAD_SHA" || true)
            if [ "$existing_comments" -eq 0 ]; then
              # Create enhanced summary with artifact link
              cp .review-pipeline/workspace/summary.md .review-pipeline/workspace/summary-enhanced.md
              echo "" >> .review-pipeline/workspace/summary-enhanced.md
              echo "---" >> .review-pipeline/workspace/summary-enhanced.md
              echo "" >> .review-pipeline/workspace/summary-enhanced.md
              echo "ðŸ“Ž **Full Reports**: [Download artifact](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts/${{ steps.upload-reports.outputs.artifact-id }})" >> .review-pipeline/workspace/summary-enhanced.md
              echo "" >> .review-pipeline/workspace/summary-enhanced.md
              
              # Add raw report snippets if they exist
              if [ -d .review-pipeline/workspace/reports/raw ]; then
                for raw_file in .review-pipeline/workspace/reports/raw/*.raw.txt; do
                  if [ -f "$raw_file" ]; then
                    provider=$(basename "$raw_file" .raw.txt)
                    echo "<details>" >> .review-pipeline/workspace/summary-enhanced.md
                    echo "<summary>ðŸ“„ ${provider} Raw Output (first 3000 chars)</summary>" >> .review-pipeline/workspace/summary-enhanced.md
                    echo "" >> .review-pipeline/workspace/summary-enhanced.md
                    echo '```json' >> .review-pipeline/workspace/summary-enhanced.md
                    head -c 3000 "$raw_file" >> .review-pipeline/workspace/summary-enhanced.md
                    echo "" >> .review-pipeline/workspace/summary-enhanced.md
                    echo '```' >> .review-pipeline/workspace/summary-enhanced.md
                    echo "</details>" >> .review-pipeline/workspace/summary-enhanced.md
                    echo "" >> .review-pipeline/workspace/summary-enhanced.md
                  fi
                done
              fi
              
              echo "<!-- Multi-Model Review SHA: $HEAD_SHA -->" >> .review-pipeline/workspace/summary-enhanced.md
              gh pr comment "$PR_NUM" --body-file .review-pipeline/workspace/summary-enhanced.md --repo "${{ github.repository }}"
            else
              echo "Already commented on this SHA, skipping duplicate."
            fi
          else
            echo "::warning::No summary generated"
          fi

      - name: Upload review artifacts
        if: always()
        uses: actions/upload-artifact@v4
        id: upload-reports
        with:
          name: review-reports-${{ github.sha }}
          path: |
            .review-pipeline/workspace/
            node_modules/@multi-model/review-pipeline/workspace/
            workspace/
          if-no-files-found: warn
          retention-days: 30

      - name: Fail if gate failed
        shell: bash
        run: |
          if [ -f .review-pipeline/workspace/gate.txt ]; then
            gate_status="$(cat .review-pipeline/workspace/gate.txt)"
            echo "Gate status: $gate_status"
            if [ "$gate_status" = "fail" ]; then
              echo "::error::Review gate failed - must-fix issues found"
              exit 1
            fi
          else
            echo "::warning::No gate status file found"
          fi